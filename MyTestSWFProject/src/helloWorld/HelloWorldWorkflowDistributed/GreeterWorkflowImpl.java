package helloWorld.HelloWorldWorkflowDistributed;

import com.amazonaws.services.simpleworkflow.flow.annotations.Asynchronous;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;

public class GreeterWorkflowImpl implements GreeterWorkflow {

	/*
	 * this activity client class GreeterActivitiesClientImpl is generated by
	 * using annotation processor on GreeterActivities It creates the class
	 * names by simply appending "Client" and "ClientImpl" to the interface
	 * name.
	 */

	/*
	 * the procxy wraps acitivity work implementations with SWF features they
	 * can be find in .apt_generated folder
	 */
	private GreeterActivitiesClient operations = new GreeterActivitiesClientImpl();
	
	@Override
	public void greet() {

		/*
		 * When the activities client method returns, the Promise<T> object is
		 * initially in an unready state, which indicates that the object does
		 * not yet represent a valid return value. When the corresponding
		 * activity method completes its task and returns, the framework assigns
		 * the return value to the Promise<T> object and puts it in the ready
		 * state.
		 */

		Promise<String> name = operations.getName();
		// now here this is done by workflow's asynchronous method instead of an activity 
		Promise<String> greeting = getGreeting(name);
		operations.say(greeting);
	}

	@Asynchronous
	private Promise<String> getGreeting(Promise<String> name) {
		String returnString = "Hello " + name.get() + "!";
		return Promise.asPromise(returnString);
	}
}